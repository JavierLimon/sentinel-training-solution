##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

#Function to require AWS IAM Access Keys have pgp_key
validate_keys = func() {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan("aws_iam_access_key")

  # Loop through the resource instances
  # Showing 5 solutions with just the first enabled
  for resource_instances as address, r {
    # Validate that access key has PGP key
    # 1
    if (length(r.applied.pgp_key) > 0) else false {
    # 2
    # if (length(r.applied.pgp_key) else 0) > 0 {
    # 3
    # if (r.applied.pgp_key matches "^keybase:(.*)") else false {
    # 4
    # if strings.has_prefix(r.applied.pgp_key else "", "keybase:") else false {
    # 5
    # if "pgp_key" in r.applied {
      print("Access key", address, "has pgp_key", r.applied.pgp_key)
    } else {
      print("Access key", address, "does not have the pgp_key attribute set")
      validated = false
    } // end if/else
  } //end for

  return validated

}

##### Rules #####

# Main rule that calls the validation function and evaluates results
main = rule {
  validate_keys()
}
