import "tfplan"
import "strings"

# Get all AWS aws_acm_certificate data sources from all modules
get_acm_certs = func() {
  certs = []
  for tfplan.state.module_paths as path {
    certs += values(tfplan.state.module(path).data.aws_acm_certificate) else []
  }
  return certs
}

# Call function
acm_certs = get_acm_certs()

# Rule to restrict ACM certs that prints all domains until after first failure
restrict_acm_certs = rule {
  all acm_certs as _, certs {
    all certs as index, c {
      print( "Found certificate with domain: ", c.attr.domain) and
      #c.attr.domain matches "(.+)\\.hashidemos\\.io$"
      strings.has_suffix(c.attr.domain else "", ".hashidemos.io")
    }
  }
}
    
# Rule to restrict ACM certs that only print violators
/*restrict_acm_certs = rule {
  not (any acm_certs as _, certs {
    any certs as index, c {
      print( "Before: Found certificate with domain: ", c.attr.domain) and
      (c.attr.domain not matches "(.+)\\.hashidemos\\.io$") and
      print( "After: Found certificate with domain: ", c.attr.domain)
    }
  })
}*/

# Main rule that requires other rules to be true
main = rule {
  (restrict_acm_certs) else true
}
