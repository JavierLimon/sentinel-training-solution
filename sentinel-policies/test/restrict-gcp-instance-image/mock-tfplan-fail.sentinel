import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"google_compute_instance": {
				"demo": {
					0: {
						"applied": {
							"allow_stopping_for_update": null,
							"attached_disk":             [],
							"boot_disk": [
								{
									"auto_delete":             true,
									"disk_encryption_key_raw": null,
									"initialize_params": [
										{
											"image": "centos-cloud/centos-7",
										},
									],
									"kms_key_self_link": null,
								},
							],
							"can_ip_forward":          false,
							"deletion_protection":     false,
							"description":             null,
							"disk":                    [],
							"hostname":                null,
							"labels":                  null,
							"machine_type":            "n1-standard-1",
							"metadata":                null,
							"metadata_startup_script": null,
							"min_cpu_platform":        null,
							"name":                    "demo",
							"network_interface": [
								{
									"access_config": [
										{
											"public_ptr_domain_name": null,
										},
									],
									"alias_ip_range": [],
									"network":        "default",
								},
							],
							"scratch_disk":             [],
							"service_account":          [],
							"shielded_instance_config": [],
							"tags":     null,
							"timeouts": null,
							"zone":     "us-east1-b",
						},
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "0.12.3"

variables = {
	"gcp_project":   "roger-berlind-demos",
	"image":         "centos-cloud/centos-7",
	"instance_name": "demo",
	"machine_type":  "n1-standard-1",
}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
