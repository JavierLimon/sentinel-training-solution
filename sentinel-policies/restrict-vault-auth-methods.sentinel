import "tfplan"

# Find all resources of a specific type
# from all modules using the tfplan import
find_resources_from_plan = func(type) {

  # Start with an empty list
  resources = []

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Append all resources of the specified type
    # or the empty map, {}, if the module does not have any
    append(resources, tfplan.module(path).resources[type] else {})
  }

  return resources
}

# Allowed Auth Methods
allowed_methods = [
  "azure",
  "kubernetes",
  "github",
  "approle",
]

# Call function
resource_maps = find_resources_from_plan("vault_auth_method")

# Rule to restrict instance types
auth_method_allowed = rule {
  resource_maps as resource_map {
    all resource_map as name, methods {
      all methods as index, m {
        print("Vault auth method", name, "has type: ", m.applied.type) and
        m.applied.type in allowed_methods
      }
    }
  }
}
  
# Main rule that requires other rules to be true
main = rule {
  (auth_method_allowed) else true
}
